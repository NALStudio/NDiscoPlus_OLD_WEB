@using NDiscoPlus.LightHandlers
@using NDiscoPlus.Models
@using NDiscoPlus.Shared.Effects.API.Channels.Effects.Intrinsics
@using System.Collections.Immutable
@using System.Collections.Frozen
@using System.Diagnostics
@using NDiscoPlus.Shared.Models

<MudStack Row="true">
    @{
        LightHandlerImplementation? impl = LightHandler?.Implementation;

        <MudTooltip Color="@(impl is not null ? Color.Default : Color.Error)" Text="@(impl?.DisplayName ?? "Unknown")" Placement="Placement.Right">
            <MudIcon Color="@(impl is not null ? Color.Inherit : Color.Error)" Icon="@(impl?.DisplayIcon ?? Icons.Material.Rounded.Warning)" />
        </MudTooltip>
        <MudText Color="@(Light is null ? Color.Error : Color.Inherit)">@(Light?.DisplayName ?? "Unknown Light")</MudText>
    }

    <MudSpacer />

    <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" >
        <MudCheckBox Label="Auto"
                     LabelPosition="LabelPosition.Start"
                     Color="Color.Inherit"
                     T="bool"
                     Value="@(!ConfigEditEnabled)"
                     ValueChanged="@(value => ConfigEditEnabledChanged(!value))" />
                     <!-- Invert value as checkbox label says 'Auto' -->

        <MudForm Disabled="@(!ConfigEditEnabled)">
            <MudButtonGroup Color="@(ConfigEditEnabled ? Color.Inherit : Color.Dark)" Variant="Variant.Filled">
                <MudSlider T="double" Value="@(Config?.Brightness ?? 1d)" ValueLabel="true" Step="0.01d">
                    <ValueLabelContent>
                        @(FormatBrightnessToPercent(Config?.Brightness ?? 1d))
                    </ValueLabelContent>
                </MudSlider>

                @foreach ((string name, Channel channel) in ChannelFlag.FlagItems)
                {
                    <MudTooltip Text="@($"{name} Channel")" Delay="1000">
                        <MudToggleIconButton Icon="@(GetChannelIcon(channel))"
                                             Color="Color.Error"
                                             ToggledColor="Color.Success"
                                             Toggled="@(GetChannelEnabled(channel))"
                                             ToggledChanged="@((value) => SetChannelEnabled(channel, value))" />
                    </MudTooltip>
                }
            </MudButtonGroup>
        </MudForm>
    </MudStack>
</MudStack>

@code {
    private static readonly FrozenDictionary<Channel, string> _kChannelIcons = new Dictionary<Channel, string>()
    {
        { Channel.Background, Icons.Material.Rounded.Landscape },
        { Channel.Default, Icons.Material.Rounded.Star },
        { Channel.Flash, Icons.Material.Rounded.Bolt },
        { Channel.Strobe, Icons.Material.Rounded.Highlight }
    }.ToFrozenDictionary();
    private const string _kDefaultIcon = Icons.Material.Rounded.QuestionMark;

    [Parameter]
    public LightHandler? LightHandler { get; set; }

    [Parameter]
    public NDPLight? Light { get; set; }

    [Parameter, EditorRequired]
    public LightProfile.LightConfig? Config { get; set; }

    [Parameter, EditorRequired]
    public Action<LightProfile.LightConfig?>? ConfigChanged { get; set; }

    [Parameter]
    public bool AllowLightRemove { get; set; } = false;

    [Parameter]
    public Action? LightRemoved { get; set; }

    private string GetChannelIcon(Channel channel)
    {
        if (_kChannelIcons.TryGetValue(channel, out string? icon))
            return icon;
        return _kDefaultIcon;
    }

    private bool ConfigEditEnabled => Config is not null;
    private void ConfigEditEnabledChanged(bool value)
    {
        LightProfile.LightConfig? config = value ? new() : null;
        Config = config;
        ConfigChanged?.Invoke(config);
    }

    private bool GetChannelEnabled(Channel channel)
        => (Config?.Channel ?? LightRecord.Default.Channel).HasFlag(channel);

    private void SetChannelEnabled(Channel channel, bool enabled)
    {
        if (Config is null)
            return;

        if (enabled)
            Config.Channel |= channel;
        else
            Config.Channel &= ~channel;

        ConfigChanged?.Invoke(Config);
    }

    private double GetBrightness()
        => (Config?.Brightness ?? LightRecord.Default.Brightness);
    private void SetBrightness(double value)
    {
        if (Config is null)
            return;

        Config.Brightness = value;
    }

    private string FormatBrightnessToPercent(double value)
        => $"{value * 100d} %";
}
