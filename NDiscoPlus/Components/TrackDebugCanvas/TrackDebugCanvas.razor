@using Excubo.Blazor.Canvas
@using Excubo.Blazor.Canvas.Contexts
@using NDiscoPlus.Shared
@using NDiscoPlus.Shared.Helpers
@using NDiscoPlus.Shared.Models
@using NDiscoPlus.Shared.Music
@using NDiscoPlus.Spotify.Models
@using SpotifyAPI.Web


<Canvas style="@Style" width="@canvasWidth" height="@canvasHeight" @ref=_canvas />

@code {
    const int canvasWidth = 1000;
    const int canvasHeight = 500;

    public const int StatCount = 2;

    [Parameter]
    public int StatIndex { get; set; } = 0;

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public SpotifyPlayerContext? Context { get; set; }

    [Parameter]
    public TrackAudioFeatures? Features { get; set; }

    [Parameter]
    public TrackAudioAnalysis? Analysis { get; set; }

    protected Canvas? _canvas;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Context is null || Features is null || Analysis is null)
            throw new InvalidOperationException("Spotfiy Player Context, Track Features and Track Audio Analysis must all be provided!");

        System.Diagnostics.Debug.Assert(_canvas is not null);
        await using (Context2D ctx = await _canvas.GetContext2DAsync())
        {
            TrackDebugCanvasRender render = StatIndex switch
            {
                0 => new TrackDebugCanvasRenderMeta(ctx, canvasWidth: canvasWidth, canvasHeight: canvasHeight, context: Context, features: Features, analysis: Analysis),
                1 => TrackDebugCanvasRenderSegments.DesibelsStyle(ctx, canvasWidth: canvasWidth, canvasHeight: canvasHeight, context: Context, features: Features, analysis: Analysis),
                2 => TrackDebugCanvasRenderSegments.DistanceStyle(ctx, canvasWidth: canvasWidth, canvasHeight: canvasHeight, context: Context, features: Features, analysis: Analysis),
                // 2 => new TrackDebugCanvasRenderTimbre(ctx, canvasWidth: canvasWidth, canvasHeight: canvasHeight, context: Context, features: Features, analysis: Analysis),
                _ => throw new InvalidOperationException($"No renderer for stat index: {StatIndex}")
            };

            await ctx.ClearRectAsync(0d, 0d, canvasWidth, canvasHeight);
            await render.RenderAsync();
        }
    }
}
