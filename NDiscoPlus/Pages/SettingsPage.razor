@page "/settings"
@using System.Collections.Immutable
@using NDiscoPlus.Components
@using NDiscoPlus.Components.Dialogs
@using NDiscoPlus.Components.LightHandlerConfigEditor
@using NDiscoPlus.LightHandlers
@using NDiscoPlus.Models
@using NDiscoPlus.Shared.Helpers

@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject ILogger<SettingsPage> logger;
@inject IDialogService DialogService

<PageTitle>NDiscoPlus Settings</PageTitle>

<MudAppBar>
    <MudIconButton Icon="@Icons.Material.Rounded.ArrowBack" Color="Color.Inherit" OnClick="NavigateBack" />

    <MudStack Row="true" Class="px-4 py-1" Spacing="1" Style="background:#ffffff; margin-left:24px; border-radius:8px" AlignItems="AlignItems.Center">
        <MudSelect T=LightConfigurationProfile Style="width:256px" Value="@currentProfile" ToStringFunc="@(profile => GetProfileName(profile))" ValueChanged="@ChangeProfile" Label="Profile">
            @foreach (LightConfigurationProfile profile in profiles)
            {
                <MudSelectItem T="LightConfigurationProfile" Value=@profile />
            }
        </MudSelect>
        <MudIconButton Icon="@Icons.Material.Rounded.Edit" OnClick="ChangeCurrentProfileName" />

        <MudDivider Style="height:48px; margin-right:8px" Vertical="true" />

        <MudMenu Disabled="@(currentProfile is null)" Icon="@Icons.Material.Rounded.Add">
            <!-- TODO: Create light handlers -->
        </MudMenu>
        <MudIconButton Icon="@Icons.Material.Rounded.Save" Disabled="@(!CurrentProfileEdited)" OnClick="SaveCurrentProfile" />
    </MudStack>

    <MudSpacer />

    <!-- TODO: Temporary icon, use logo instead. -->
    <MudIcon Icon="@Icons.Material.Rounded.Lightbulb" Color="Color.Inherit" />
</MudAppBar>

<MudMainContent Class="mt-16 pa-4">
    @if (currentProfile is not null)
    {
        <MudForm @ref=form @bind-IsTouched=_formIsTouched>
            <MudExpansionPanels MultiExpansion="true">
                @foreach (LightHandler handler in currentProfile.Handlers)
                {
                    LightHandlerConfig config = handler.ConfigRef;
                    var parameters = LightHandlerConfigEditor<LightHandlerConfig>.CreateParametersDictionary(config);
                    
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@(handler.DisplayIcon)" Class="mr-3" />
                                <MudText><strong>@(handler.DisplayName)</strong></MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <DynamicComponent Type="config.GetEditorType()" Parameters="@parameters" />
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </MudForm>
    }
</MudMainContent>

<MudMessageBox @ref=_mudMessageBox Title="Unsaved Changes!" CancelText="Cancel">
    <MessageContent>
        There are unsaved messages.
        Are you sure you want to discard them?
    </MessageContent>
    <YesButton>
        <MudButton Color="Color.Error">Discard</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private readonly List<LightConfigurationProfile> profiles = new();
    private LightConfigurationProfile? currentProfile;

    private HashSet<int> _expandedHandlerSettings = new();

    private MudMessageBox? _mudMessageBox;

    private MudForm? form;

    private bool _formIsTouched = false;
    private bool _currentProfileEdited = false;
    private bool CurrentProfileEdited
    {
        get => _formIsTouched || _currentProfileEdited;
        set
        {
            if (!value)
                throw new ArgumentException("Cannot set value as false.");
            _currentProfileEdited = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadProfiles();
    }

    private bool HandlerIsExpanded(int index) => _expandedHandlerSettings.Contains(index);
    private void ExpandHandler(int index, bool expand)
    {
        if (expand)
            _ = _expandedHandlerSettings.Add(index);
        else
            _ = _expandedHandlerSettings.Remove(index);
    }

    private string GetProfileName(LightConfigurationProfile profile)
        => string.IsNullOrWhiteSpace(profile.Name) ? "Unnamed Profile" : profile.Name;

    private async Task ReloadProfiles()
    {
        // profiles are sorted in alphabetical order by their name

        // load current before loading all profiles so that the current profile is included in all profiles
        LightConfigurationProfile currentProfile = await LightConfigurationProfile.LoadCurrent(localStorage);

        profiles.Clear();
        await foreach (LightConfigurationProfile profile in LightConfigurationProfile.LoadAll(localStorage))
            Bisect.InsortRight(profiles, profile, keySelector: p => p.Name);

        // get current profile from list so that we only have a single instance of all profiles
        this.currentProfile = profiles.Single(p => p.UniqueId == currentProfile.UniqueId);
    }

    private async Task<bool> CanDiscardCurrentProfile()
    {
        if (!CurrentProfileEdited)
            return true;

        bool? result = await _mudMessageBox!.ShowAsync();
        return result == true;
    }

    private async Task SaveCurrentProfile()
    {
        if (currentProfile is null)
            throw new InvalidOperationException("No current profile loaded.");

        _currentProfileEdited = false;
        form!.ResetTouched();
        _formIsTouched = false;
        await LightConfigurationProfile.Save(localStorage, currentProfile);
    }

    private async Task ChangeProfile(LightConfigurationProfile newProfile)
    {
        if (newProfile == currentProfile)
            return;

        if (!(await CanDiscardCurrentProfile()))
            return;

        await LightConfigurationProfile.SaveAsCurrent(localStorage, newProfile);
        await ReloadProfiles();
    }

    private async Task ChangeCurrentProfileName()
    {
        if (currentProfile is null)
            throw new InvalidOperationException("No current profile loaded.");

        string initialText = currentProfile.Name;
        DialogParameters<RenameProfileDialog> parameters = new()
        {
            { p => p.InitialText, initialText }
        };

        DialogResult? res = await DialogService.Show<RenameProfileDialog>("Rename Profile", parameters).Result;
        if (res?.Data is string name)
        {
            currentProfile.Name = name;
            CurrentProfileEdited = true;
        }
    }

    private async Task NavigateBack()
    {
        if (!(await CanDiscardCurrentProfile()))
            return;

        navigationManager.NavigateTo("..", forceLoad: true);
    }
}
