@page "/debug"
@page "/debug/{pageIndex:int}"

@using NDiscoPlus.Components
@using NDiscoPlus.Components.TrackDebugCanvas
@using NDiscoPlus.Constants
@using NDiscoPlus.Models
@using NDiscoPlus.Shared
@using NDiscoPlus.Shared.Models
@using NDiscoPlus.Spotify.Models
@using NDiscoPlus.Spotify.Players
@using SpotifyAPI.Web

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILogger<HomePage> logger;
@inject ILogger<SpotifyWebPlayer> playerLogger;
@inject NavigationManager navigationManager

<div style="width:100vw; height:100vh; align-content:center;">
    @if (PageIndex is null)
    {
        <h3 style="text-align:center;">Redirecting...</h3>
    }
    else if (PageIndex.Value < 0 || PageIndex.Value > TrackDebugCanvas.StatCount)
    {
        <h3 style="text-align:center;">Invalid Page Index</h3>
    }
    else if(canvasCtx is null)
    {
        <h3 style="text-align:center;">No Track Data</h3>
    }
    else
    {
        <img width="256"
            src="@canvasCtx.Context.Track.LargestImage.Url"
            style="display:block; margin-left:auto; margin-right:auto;" />
        <h3 style="text-align:center;">@canvasCtx.Context.Track.Name</h3>
        <TrackDebugCanvas Style="display:block; margin-left:auto; margin-right:auto"
                          StatIndex="@PageIndex.Value"
                          Context="@canvasCtx.Context"
                          Features="@canvasCtx.Features"
                          Analysis="@canvasCtx.Analysis"
                          />
    }
</div>

@code {
    [Parameter]
    public int? PageIndex { get; set; } = null;

    SpotifyClient? spotify = null;

    CanvasContext? canvasCtx;

    record CanvasContext(SpotifyPlayerContext Context, TrackAudioFeatures Features, TrackAudioAnalysis Analysis);

    protected override async Task OnInitializedAsync()
    {
        if (!PageIndex.HasValue)
            navigationManager.NavigateTo("./debug/0", replace: true);

        StoredSpotifyRefreshToken? refreshToken = await localStorage.GetItemAsync<StoredSpotifyRefreshToken>(LocalStoragePaths.SpotifyRefreshToken);
        if (refreshToken is StoredSpotifyRefreshToken rt && NDPConstants.SpotifyScope.All(s => refreshToken.Scope.Contains(s)))
        {
            try
            {
                logger.LogInformation("Spotify login success.");
                await LoginSpotify(rt.RefreshToken);
            }
            catch (Exception e)
            {
                logger.LogError("Spotify login failed with error: '{}'. Requesting new login...", e);
                RequestLogin();
            }
        }
        else
        {
            logger.LogInformation(
                "Requesting new Spotify login.\n- refresh token null: {}\n- old scope: {}\n- new scope: {}",
                refreshToken is null,
                refreshToken is null ? "null" : string.Join(' ', refreshToken.Scope),
                NDPConstants.SpotifyScope
            );
            RequestLogin();
        }

        _ = StartPlayer();
    }

    void RequestLogin()
    {
        navigationManager.NavigateTo("./spotify-login");
    }

    async Task LoginSpotify(string refreshToken)
    {
        PKCETokenResponse oauthResp = await new OAuthClient().RequestToken(
            new PKCETokenRefreshRequest(NDPConstants.SpotifyClientId, refreshToken)
        );
        await OnSpotifyTokenRefreshed(oauthResp);

        PKCEAuthenticator authenticator = new(NDPConstants.SpotifyClientId, oauthResp);
        authenticator.TokenRefreshed += async (sender, resp) => await OnSpotifyTokenRefreshed(resp);

        spotify = new SpotifyClient(
            SpotifyClientConfig.CreateDefault()
            .WithAuthenticator(authenticator)
        );
    }

    async Task OnSpotifyTokenRefreshed(PKCETokenResponse response)
    {
        StoredSpotifyRefreshToken? token = await localStorage.GetItemAsync<StoredSpotifyRefreshToken>(LocalStoragePaths.SpotifyRefreshToken);
        if (token?.RefreshToken != response.RefreshToken)
        {
            await localStorage.SetItemAsync(
                LocalStoragePaths.SpotifyRefreshToken,
                new StoredSpotifyRefreshToken(response.RefreshToken, response.Scope.Split(' '))
            );
        }
    }

    async Task StartPlayer()
    {
        if (spotify is null)
            return;

        (string trackId, TrackAudioFeatures features, TrackAudioAnalysis analysis)? analysis = null;

        SpotifyPlayer player = new SpotifyWebPlayer(spotify, playerLogger);
        await foreach (SpotifyPlayerContext? context in player.ListenAsync(50))
        {
            if (context is null) 
            {
                analysis = null;
            }
            else if (analysis?.trackId != context.Track.Id)
            {
                TrackAudioFeatures f = await spotify.Tracks.GetAudioFeatures(context.Track.Id);
                TrackAudioAnalysis a = await spotify.Tracks.GetAudioAnalysis(context.Track.Id);
                analysis = (context.Track.Id, f, a);
            }

            if (context is not null && analysis.HasValue)
                canvasCtx = new CanvasContext(context, analysis.Value.features, analysis.Value.analysis);
            else
                canvasCtx = null;

            StateHasChanged();
        }
    }
}
