@page "/"

@using BlazorWorker.BackgroundServiceFactory;
@using BlazorWorker.Core

@using BlazorWorker.WorkerBackgroundService
@using HueApi.Models
@using MudBlazor.Utilities
@using NDiscoPlus.Constants
@using NDiscoPlus.Models
@using NDiscoPlus.Shared
@using NDiscoPlus.Shared.Effects.API.Channels.Effects.Intrinsics
@using NDiscoPlus.Shared.Helpers
@using NDiscoPlus.Shared.Models.Color
@using NDiscoPlus.Shared.Music
@using NDiscoPlus.Shared.Models
@using NDiscoPlus.Spotify.Models
@using NDiscoPlus.Spotify.Players
@using NDiscoPlus.Components;
@using SkiaSharp
@using SpotifyAPI.Web
@using System.Diagnostics
@using System.Text.Json
@using System.Web
@using System.Globalization
@using System.Collections.Frozen
@using System.Collections.Immutable

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject ILogger<HomePage> logger;
@inject ILogger<SpotifyWebPlayer> playerLogger;
@inject IWorkerFactory workerFactory;
@inject IJSRuntime JSRuntime;

<PageTitle>@("NDiscoPlus" + (interpreterFps is InterpreterFPS fps ? $" - {fps.Average:0.00} fps ({fps.Min:0.00} min)" : string.Empty))</PageTitle>

<div style="width:100vw; height:100vh; overflow: hidden;">
    <BackgroundGradientCanvas Colors="@gradient" />
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Style="padding-top:20vh;position:absolute;top:0;left:0;right:0;bottom:0;">
        @if(context is not null) {
            <MudImage
                Src="@context.Track.ImageUrl"
                Width="256"
                Height="256"/>
        }
        else
        {
            <div style="background:#1DB954;padding:64px">
                <MudImage
                    Src="./img/spotify_icon_white.svg"
                    Width="128"
                    Height="128"/>
            </div>
        }
        <div style="min-width:256px;">
            <MudText Style="line-height:1.0; font-size:x-large;"><b>@(context?.Track.Name ?? "Not Playing...")</b></MudText>
            @if(context is not null)
            {
                <MudText Style="font-size:medium;padding-bottom:1em">@string.Join(", ", context.Track.Artists)</MudText>
            }
        </div>
        <div style="width:80%; max-width:512px; padding-bottom:64px">
            @if(context is not null)
            {
                <MudProgressLinear
                    Value="@(context.Progress.TotalSeconds)"
                    Min="0"
                    Max="@(context.Track.Length.TotalSeconds)"
                    Rounded="true"
                    />
                <MudStack Style="" Row="true" Justify="Justify.SpaceBetween">
                    <MudText Style="line-height:2; font-size:small;">@(context.Progress.ToString(TimespanFormat))</MudText>
                    <MudText Style="line-height:2; font-size:small;">@(context.Track.Length.ToString(TimespanFormat))</MudText>
                </MudStack>
            }
        </div>
        <MudButton
            StartIcon="@Icons.Material.Rounded.Lightbulb"
            Variant="@(isPlaying ? Variant.Outlined : Variant.Filled)"
            Size=Size.Large
            Color=MudBlazor.Color.Primary
            Disabled=@(spotify is null || playStarting)
            OnClick=TogglePlay>
            @(isPlaying ? "Stop" : "Play")
        </MudButton>
    </MudStack>
</div>
@if (context is not null && context.NextTrack is not null)
{
    <MudPaper Elevation="8" Class="next_track_fadein" Style="position:fixed; top:24px; right:24px; background:#000000AA; padding:16px; border-radius:16px;">
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudImage
            Src="@(context?.NextTrack?.SmallImageUrl ?? "./img/spotify_icon_green.svg")"
            Width="48"
            Height="48"
            />
            <MudStack Spacing="0">
                <MudText
                Style="font-size:small; color:#FFFFFFAA">
                    Next Track
                </MudText>
                <MudText
                Style="line-height:1.0; font-size:x-large; white-space:nowrap; color:white">
                    @(context?.NextTrack?.Name ?? "null")
                </MudText>
            </MudStack>
        </MudStack>
    </MudPaper>
}
@if (!isPlaying)
{
    <MudStack Style="position:fixed; top:0; left:0; padding:16px">
        <MudIconButton Icon="@Icons.Material.Rounded.Settings" Size="Size.Large" />
        <MudIconButton Icon="@Icons.Material.Rounded.Fullscreen"
                       Size="Size.Large"
                       OnClick="ToggleFullscreen" />
        @if (DebugEnabled)
        {
            <MudIconButton Disabled="@(data.CurrentTrackData is null)"
                           Icon="@Icons.Material.Rounded.BugReport"
                           Size="Size.Large"
                           OnClick="@(async () => await OpenEffectVisualizer(data.CurrentTrackData!))" />
        }
    </MudStack>
}

<style>
    .next_track_fadein {
        animation: fadein 2s;
    }

    @@keyframes fadein {
        from { opacity: 0; }
        to   { opacity: 1; }
    }
</style>

@code {
    #if DEBUG
    public bool DebugEnabled { get; } = true;
    #else
    [SupplyParameterFromQuery(Name = "debug")]
    public bool DebugEnabled { get; init; }
    #endif

    record NDPDataContainer {
        public string? CurrentTrackId { get; set; } = null;
        public Shared.Models.NDPData? CurrentTrackData { get; set; } = null;
        public int? CurrentTrackBackgroundLightCount { get; set; } = null;
        public string? NextTrackId { get; set; } = null;
        public Shared.Models.NDPData? NextTrackData { get; set; } = null;
        public int? NextTrackBackgroundLightCount { get; set; } = null;
    }

    readonly record struct FetchTask(string TrackId, int BackgroundLightCount, Task<NDPData> Task);
    readonly record struct InterpreterFPS(double Average, double Min);

    const string TimespanFormat = @"mm\:ss";

    readonly List<NDPColor> gradient = _defaultGradient.ToList();
    static readonly ImmutableArray<NDPColor> _defaultGradient = NDiscoPlusService.DefaultPalettes[0].ToImmutableArray();
    LightInterpreter gradientLights = new();

    readonly NDPDataContainer data = new();
    List<FetchTask> fetchTasks = new();

    bool isPlaying = false;
    bool playStarting = false;

    const int targetFps = 75;
    InterpreterFPS? interpreterFps;
    const int interpreterFpsFramesCount = 25;
    List<double> interpreterFpsFrames = new(capacity: interpreterFpsFramesCount);

    SpotifyClient? spotify = null;
    SpotifyPlayerContext? context = null;

    IWorkerBackgroundService<NDiscoPlusService>? ndpService = null;

    protected override async Task OnInitializedAsync()
    {
        StoredSpotifyRefreshToken? refreshToken = await localStorage.GetItemAsync<StoredSpotifyRefreshToken>(LocalStoragePaths.SpotifyRefreshToken);
        if (refreshToken is StoredSpotifyRefreshToken rt && NDPConstants.SpotifyScope.All(s => refreshToken.Scope.Contains(s)))
        {
            try
            {
                logger.LogInformation("Spotify login success.");
                await LoginSpotify(rt.RefreshToken);
            }
            catch (Exception e)
            {
                logger.LogError("Spotify login failed with error: '{}'. Requesting new login...", e);
                RequestLogin();
            }
        }
        else
        {
            logger.LogInformation(
                "Requesting new Spotify login.\n- refresh token null: {}\n- old scope: {}\n- new scope: {}",
                refreshToken is null,
                refreshToken is null ? "null" : string.Join(' ', refreshToken.Scope),
                NDPConstants.SpotifyScope
            );
            RequestLogin();
        }

        var ndpWorker = await workerFactory.CreateAsync();
        ndpService = await ndpWorker.CreateBackgroundServiceAsync<NDiscoPlusService>();

        new Task(async () => await StartPlayer(), TaskCreationOptions.LongRunning).Start();
    }

    async Task OpenEffectVisualizer(NDPData data)
    {
        ArgumentNullException.ThrowIfNull(data, nameof(data));

        await localStorage.SetItemAsStringAsync("effectVisualizerNDPData", NDPData.Serialize(data));

        TrackAudioAnalysis? analysis;
        if (spotify is not null)
            analysis = await spotify.Tracks.GetAudioAnalysis(data.Track.Id);
        else
            analysis = null;

        string serializedAnalysis = analysis is not null ? JsonSerializer.Serialize(analysis) : string.Empty;
        await localStorage.SetItemAsStringAsync("effectVisualizerTrackAnalysis", serializedAnalysis);

        await JSRuntime.InvokeVoidAsync("open", navigationManager.ToAbsoluteUri($"./effectVisualizer").AbsoluteUri, "_blank");
    }

    async Task ToggleFullscreen()
    {
        IJSObjectReference module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/HomePage.razor.js");
        await module.InvokeVoidAsync("toggleNDiscoPlusFullscreen");
    }

    #region Lights
    async Task TogglePlay()
    {
        playStarting = true;

        if (isPlaying)
        {
            await StopPlaying();
        }
        else
        {
            await StartPlaying();
        }

        playStarting = false;
    }

    async Task StartPlaying()
    {
        await Task.Delay(500);
        isPlaying = true;
    }

    async Task StopPlaying()
    {
        await Task.Delay(500);
        isPlaying = false;
    }
    #endregion

    #region Spotify
    async Task StartPlayer()
    {
        if (spotify is null)
            return;

        SpotifyPlayer player = new SpotifyWebPlayer(spotify, playerLogger);
        await foreach (SpotifyPlayerContext? context in player.ListenAsync(targetFps))
        {
            int gradientColorCount = await GetGradientColorCount();

            this.context = context;
            UpdateData(spotify, context?.Track, context?.NextTrack, gradientColorCount);

            if (!isPlaying || context is null)
            {
                NDPData? currentTrackData;
                lock(data)
                {
                    currentTrackData = data.CurrentTrackData;
                }

                if (currentTrackData is not null)
                    UpdateGradient(in gradient, gradientColorCount, currentTrackData.ReferencePalette);
                else
                    UseDefaultGradient(in gradient, gradientColorCount);

                interpreterFps = null;
            }
            else
            {
                NDPData? currentTrackData;
                lock(data)
                {
                    currentTrackData = data.CurrentTrackData;
                }

                if (currentTrackData is not null)
                {
                    try
                    {
                        LightInterpreterResult result = gradientLights.Update(context.Progress, currentTrackData);
                        interpreterFpsFrames.Add(result.FPS);
                        UpdateGradient(in gradient, gradientColorCount, currentTrackData, result.Lights);
                    }
                    catch (Exception e)
                    {
                        logger.LogError($"Lights update failed with error: '{e}'");
                        UpdateGradient(in gradient, gradientColorCount, currentTrackData.ReferencePalette);
                    }

                    if (interpreterFpsFrames.Count >= interpreterFpsFramesCount)
                    {
                        double avgFps = interpreterFpsFrames.Sum() / interpreterFpsFrames.Count;
                        double minFps = interpreterFpsFrames.Min();
                        interpreterFps = new(Average: avgFps, Min: minFps);

                        interpreterFpsFrames.Clear();
                    }
                }
                else
                {
                    UseDefaultGradient(in gradient, gradientColorCount);
                    interpreterFps = null;
                }
            }

            StateHasChanged();
        }
    }

    void UpdateData(SpotifyClient spotify, SpotifyPlayerTrack? currentTrack, SpotifyPlayerTrack? nextTrack, int targetBackgroundLightCount)
    {
        string? currentTrackId = currentTrack?.Id;
        string? nextTrackId = nextTrack?.Id;


        List<SpotifyPlayerTrack> toFetchTracks = new(2);

        lock (data)
        {
            if (data.CurrentTrackId != currentTrackId || data.CurrentTrackBackgroundLightCount != targetBackgroundLightCount)
            {
                if (data.NextTrackId == currentTrackId)
                {
                    data.CurrentTrackId = data.NextTrackId;
                    data.CurrentTrackBackgroundLightCount = data.NextTrackBackgroundLightCount;
                    data.CurrentTrackData = data.NextTrackData;
                }
                else
                {
                    data.CurrentTrackId = currentTrackId;
                    data.CurrentTrackBackgroundLightCount = targetBackgroundLightCount;
                    data.CurrentTrackData = null;
                    if (currentTrack is not null)
                        toFetchTracks.Add(currentTrack);
                }
            }

            if (data.NextTrackId != nextTrackId || data.NextTrackBackgroundLightCount != targetBackgroundLightCount)
            {
                data.NextTrackId = nextTrackId;
                data.NextTrackBackgroundLightCount = targetBackgroundLightCount;
                data.NextTrackData = null;
                if (nextTrack is not null)
                    toFetchTracks.Add(nextTrack);
            }
        }

        foreach (SpotifyPlayerTrack fetch in toFetchTracks)
        {
            string fetchId = fetch.Id;
            // fetchTasks is empty => !false => true => Add()
            if (!fetchTasks.Any(f => f.TrackId == fetchId)) // sometimes the fetch for the same song would happen twice, we want to avoid it due to performance (and because the effects might be different)
                fetchTasks.Add(new FetchTask(fetchId, targetBackgroundLightCount, ComputeData(spotify, fetch, targetBackgroundLightCount)));
        }

        var finishedTasks = fetchTasks.Where(t => t.Task.IsCompleted).ToArray();
        foreach (FetchTask task in finishedTasks)
        {
            Debug.Assert(task.Task.IsCompleted);

            NDPData d = task.Task.Result;
            Debug.Assert(task.TrackId == d.Track.Id);

            lock (data)
            {
                if (data.CurrentTrackId == task.TrackId && data.CurrentTrackBackgroundLightCount == task.BackgroundLightCount)
                    data.CurrentTrackData = d;
                if (data.NextTrackId == task.TrackId && data.NextTrackBackgroundLightCount == task.BackgroundLightCount)
                    data.NextTrackData = d;
            }

            fetchTasks.Remove(task);
        }
    }

    async Task<NDPData> ComputeData(SpotifyClient spotify, SpotifyPlayerTrack track, int backgroundLightCount)
    {
        logger.LogInformation("Computing new data for track: '{}' ({})...", track.Name, track.Id);

        TrackAudioFeatures features = await spotify.Tracks.GetAudioFeatures(track.Id);
        TrackAudioAnalysis analysis = await spotify.Tracks.GetAudioAnalysis(track.Id);

        NDiscoPlusArgsLights lights;
        if (backgroundLightCount == 4)
        {
            lights = NDiscoPlusArgsLights.CreateSingleChannel(
                new NDPLight(new ScreenLightId(0), new HueApi.Models.HuePosition(-1, 1, 1), colorGamut: ColorGamut.DisplayP3),
                new NDPLight(new ScreenLightId(1), new HueApi.Models.HuePosition(1, 1, 1), colorGamut: ColorGamut.DisplayP3),
                new NDPLight(new ScreenLightId(2), new HueApi.Models.HuePosition(-1, -1, -1), colorGamut: ColorGamut.DisplayP3),
                new NDPLight(new ScreenLightId(3), new HueApi.Models.HuePosition(1, -1, -1), colorGamut: ColorGamut.DisplayP3)
            );
        }
        else if (backgroundLightCount == 6)
        {
            lights = NDiscoPlusArgsLights.CreateSingleChannel(
                new NDPLight(new ScreenLightId(0), new HueApi.Models.HuePosition(-1, 1, 1), colorGamut: ColorGamut.DisplayP3),
                new NDPLight(new ScreenLightId(1), new HueApi.Models.HuePosition(0, 1, 1), colorGamut: ColorGamut.DisplayP3),
                new NDPLight(new ScreenLightId(2), new HueApi.Models.HuePosition(1, 1, 1), colorGamut: ColorGamut.DisplayP3),
                new NDPLight(new ScreenLightId(3), new HueApi.Models.HuePosition(-1, -1, -1), colorGamut: ColorGamut.DisplayP3),
                new NDPLight(new ScreenLightId(4), new HueApi.Models.HuePosition(0, -1, -1), colorGamut: ColorGamut.DisplayP3),
                new NDPLight(new ScreenLightId(5), new HueApi.Models.HuePosition(1, -1, -1), colorGamut: ColorGamut.DisplayP3)
            );
        }
        else
        {
            throw new ArgumentException("Background light count must either be 4 or 6.");
        }
        EffectConfig effects = new();
        NDiscoPlusArgs args = new(track, features, analysis, effects, lights);

        string argsSerialized = NDiscoPlusArgs.Serialize(args);

        string dataSerialized = await ndpService!.RunAsync(s => s.ComputeDataWithImageColorsFromSerialized(argsSerialized));
        var d = NDPData.Deserialize(dataSerialized);

        logger.LogInformation("Data computed: '{}' ({}).", track.Name, track.Id);
        return d;
    }

    void RequestLogin()
    {
        navigationManager.NavigateTo("./spotify-login");
    }

    async Task LoginSpotify(string refreshToken)
    {
        PKCETokenResponse oauthResp = await new OAuthClient().RequestToken(
            new PKCETokenRefreshRequest(NDPConstants.SpotifyClientId, refreshToken)
        );
        await OnSpotifyTokenRefreshed(oauthResp);

        PKCEAuthenticator authenticator = new(NDPConstants.SpotifyClientId, oauthResp);
        authenticator.TokenRefreshed += async (sender, resp) => await OnSpotifyTokenRefreshed(resp);

        spotify = new SpotifyClient(
            SpotifyClientConfig.CreateDefault()
            .WithAuthenticator(authenticator)
        );
    }

    async Task OnSpotifyTokenRefreshed(PKCETokenResponse response)
    {
        StoredSpotifyRefreshToken? token = await localStorage.GetItemAsync<StoredSpotifyRefreshToken>(LocalStoragePaths.SpotifyRefreshToken);
        if (token?.RefreshToken != response.RefreshToken)
        {
            await localStorage.SetItemAsync(
                LocalStoragePaths.SpotifyRefreshToken,
                new StoredSpotifyRefreshToken(response.RefreshToken, response.Scope.Split(' '))
            );
        }
    }
    #endregion

    #region Colors
    async Task<int> GetGradientColorCount() {
        IJSObjectReference module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/HomePage.razor.js");
        double aspect = await module.InvokeAsync<double>("getWindowAspectRatio");
        if (aspect > 1.75d)
            return 6;
        else
            return 4;
    }

    static void UseDefaultGradient(in List<NDPColor> gradient, int colorCount)
    {
        gradient.Clear();
        gradient.AddRange(_defaultGradient.Take(colorCount));
    }

    static void UpdateGradient(in List<NDPColor> gradient, int colorCount, NDPColorPalette palette)
    {
        static void Set(in List<NDPColor> gradient, NDPColor topLeft, NDPColor topRight, NDPColor bottomLeft, NDPColor bottomRight)
        {
            gradient.Clear();

            gradient.Add(topLeft);
            gradient.Add(topRight);
            gradient.Add(bottomLeft);
            gradient.Add(bottomRight);
        }

        static void Set6(in List<NDPColor> gradient, IList<NDPColor> colors)
        {
            if (colors.Count < 6)
                throw new ArgumentException("At least 6 colors must be provided");

            gradient.Clear();
            gradient.AddRange(colors.Take(6));
        }

        IList<NDPColor> colors = palette.Colors;

        // By choosing a single color from the image as the background,
        // it seemed to just pick some random color which was barely visible in the image
        // so use default gradient if at least 2 colors can't be decided from the image.
        if (colors.Count < 2)
            UseDefaultGradient(in gradient, colorCount);
        else if (colors.Count < 4)
            Set(in gradient, colors[0], colors[0], colors[1], colors[1]);
        else if (colors.Count < 6 || colorCount < 6)
            Set(in gradient, colors[0], colors[1], colors[2], colors[3]);
        else
            Set6(in gradient, colors);
    }

    static void UpdateGradient(in List<NDPColor> gradient, int colorCount, NDPData data, IDictionary<LightId, NDPColor> lights)
    {
        gradient.Clear();
        gradient.AddRange(Enumerable.Repeat(default(NDPColor), 4));

        #if DEBUG
        int setIndexesBitmap = 0;
        #endif

        foreach ((LightId lightId, NDPColor color) in lights)
        {
            if (lightId is not ScreenLightId sli)
                continue;

            if (sli.Index >= 4 && gradient.Count < 6)
            {
                Debug.Assert(gradient.Count == 4);
                gradient.Add(default);
                gradient.Add(default);
            }

            gradient[sli.Index] = color;
            #if DEBUG
            setIndexesBitmap |= 0b1 << sli.Index;
            #endif
        }

        #if DEBUG
        Debug.Assert(setIndexesBitmap == 0b1111 || setIndexesBitmap == 0b111111);
        #endif
    }
    #endregion
}
